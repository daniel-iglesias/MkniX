<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="d2/dde/namespacemknix" kind="namespace" language="C++">
    <compoundname>mknix</compoundname>
    <innerclass refid="df/d86/classmknix_1_1_analysis" prot="public">mknix::Analysis</innerclass>
    <innerclass refid="d4/d8c/classmknix_1_1_analysis_dynamic" prot="public">mknix::AnalysisDynamic</innerclass>
    <innerclass refid="db/d8f/classmknix_1_1_analysis_static" prot="public">mknix::AnalysisStatic</innerclass>
    <innerclass refid="d5/dd9/classmknix_1_1_analysis_thermal_dynamic" prot="public">mknix::AnalysisThermalDynamic</innerclass>
    <innerclass refid="d4/d3e/classmknix_1_1_analysis_thermal_static" prot="public">mknix::AnalysisThermalStatic</innerclass>
    <innerclass refid="da/df3/classmknix_1_1_analysis_thermo_mechanical_dynamic" prot="public">mknix::AnalysisThermoMechanicalDynamic</innerclass>
    <innerclass refid="dd/de3/classmknix_1_1_body" prot="public">mknix::Body</innerclass>
    <innerclass refid="d8/d6b/classmknix_1_1_boundary_group" prot="public">mknix::BoundaryGroup</innerclass>
    <innerclass refid="db/dd4/classmknix_1_1_cell" prot="public">mknix::Cell</innerclass>
    <innerclass refid="d8/d1e/classmknix_1_1_cell_boundary" prot="public">mknix::CellBoundary</innerclass>
    <innerclass refid="d2/dfc/classmknix_1_1_cell_boundary_linear" prot="public">mknix::CellBoundaryLinear</innerclass>
    <innerclass refid="dd/d89/classmknix_1_1_cell_rect" prot="public">mknix::CellRect</innerclass>
    <innerclass refid="d9/d39/classmknix_1_1_cell_tetrahedron" prot="public">mknix::CellTetrahedron</innerclass>
    <innerclass refid="de/db4/classmknix_1_1_cell_triang" prot="public">mknix::CellTriang</innerclass>
    <innerclass refid="d1/d90/classmknix_1_1_comp_bar" prot="public">mknix::CompBar</innerclass>
    <innerclass refid="da/dd3/classmknix_1_1_constraint" prot="public">mknix::Constraint</innerclass>
    <innerclass refid="d2/d2c/classmknix_1_1_constraint_clearance" prot="public">mknix::ConstraintClearance</innerclass>
    <innerclass refid="d8/d6a/classmknix_1_1_constraint_contact" prot="public">mknix::ConstraintContact</innerclass>
    <innerclass refid="d7/de2/classmknix_1_1_constraint_distance" prot="public">mknix::ConstraintDistance</innerclass>
    <innerclass refid="d7/dcd/classmknix_1_1_constraint_fixed_axis" prot="public">mknix::ConstraintFixedAxis</innerclass>
    <innerclass refid="de/dda/classmknix_1_1_constraint_fixed_coordinates" prot="public">mknix::ConstraintFixedCoordinates</innerclass>
    <innerclass refid="d9/d61/classmknix_1_1_constraint_thermal" prot="public">mknix::ConstraintThermal</innerclass>
    <innerclass refid="d3/d42/classmknix_1_1_constraint_thermal_fixed" prot="public">mknix::ConstraintThermalFixed</innerclass>
    <innerclass refid="df/dde/classmknix_1_1_contact" prot="public">mknix::Contact</innerclass>
    <innerclass refid="dd/d4d/classmknix_1_1_elem_tetrahedron" prot="public">mknix::ElemTetrahedron</innerclass>
    <innerclass refid="d8/d3f/classmknix_1_1_elem_triangle" prot="public">mknix::ElemTriangle</innerclass>
    <innerclass refid="dd/d8d/classmknix_1_1_flex_body" prot="public">mknix::FlexBody</innerclass>
    <innerclass refid="db/d6e/classmknix_1_1_flex_frame_galerkin" prot="public">mknix::FlexFrameGalerkin</innerclass>
    <innerclass refid="d6/d4a/classmknix_1_1_flex_global_galerkin" prot="public">mknix::FlexGlobalGalerkin</innerclass>
    <innerclass refid="d5/d3b/classmknix_1_1_force" prot="public">mknix::Force</innerclass>
    <innerclass refid="d2/da4/classmknix_1_1_gauss_point" prot="public">mknix::GaussPoint</innerclass>
    <innerclass refid="df/d77/classmknix_1_1_gauss_point2_d" prot="public">mknix::GaussPoint2D</innerclass>
    <innerclass refid="d6/d47/classmknix_1_1_gauss_point3_d" prot="public">mknix::GaussPoint3D</innerclass>
    <innerclass refid="d0/de2/classmknix_1_1_gauss_point_boundary" prot="public">mknix::GaussPointBoundary</innerclass>
    <innerclass refid="db/d1c/classmknix_1_1_load" prot="public">mknix::Load</innerclass>
    <innerclass refid="d8/d54/classmknix_1_1_load_thermal" prot="public">mknix::LoadThermal</innerclass>
    <innerclass refid="d2/d5c/classmknix_1_1_load_thermal_body" prot="public">mknix::LoadThermalBody</innerclass>
    <innerclass refid="df/df4/classmknix_1_1_load_thermal_boundary1_d" prot="public">mknix::LoadThermalBoundary1D</innerclass>
    <innerclass refid="d6/d4a/classmknix_1_1_material" prot="public">mknix::Material</innerclass>
    <innerclass refid="d1/dda/classmknix_1_1_motion" prot="public">mknix::Motion</innerclass>
    <innerclass refid="d3/d25/classmknix_1_1_node" prot="public">mknix::Node</innerclass>
    <innerclass refid="d3/d19/classmknix_1_1_point" prot="public">mknix::Point</innerclass>
    <innerclass refid="d1/d7f/classmknix_1_1_radiation" prot="public">mknix::Radiation</innerclass>
    <innerclass refid="d0/d66/classmknix_1_1_reader" prot="public">mknix::Reader</innerclass>
    <innerclass refid="d2/dad/classmknix_1_1_reader_constraints" prot="public">mknix::ReaderConstraints</innerclass>
    <innerclass refid="d7/d17/classmknix_1_1_reader_flex" prot="public">mknix::ReaderFlex</innerclass>
    <innerclass refid="df/de5/classmknix_1_1_reader_rigid" prot="public">mknix::ReaderRigid</innerclass>
    <innerclass refid="d6/dd9/classmknix_1_1_rigid_bar" prot="public">mknix::RigidBar</innerclass>
    <innerclass refid="d0/d13/classmknix_1_1_rigid_body" prot="public">mknix::RigidBody</innerclass>
    <innerclass refid="d6/d6d/classmknix_1_1_rigid_body2_d" prot="public">mknix::RigidBody2D</innerclass>
    <innerclass refid="dd/d2a/classmknix_1_1_rigid_body3_d" prot="public">mknix::RigidBody3D</innerclass>
    <innerclass refid="d8/de9/classmknix_1_1_rigid_body_mass_point" prot="public">mknix::RigidBodyMassPoint</innerclass>
    <innerclass refid="dd/d8d/classmknix_1_1_shape_function" prot="public">mknix::ShapeFunction</innerclass>
    <innerclass refid="d8/d0e/classmknix_1_1_shape_function_linear" prot="public">mknix::ShapeFunctionLinear</innerclass>
    <innerclass refid="dc/de4/classmknix_1_1_shape_function_linear_x" prot="public">mknix::ShapeFunctionLinearX</innerclass>
    <innerclass refid="db/d02/classmknix_1_1_shape_function_m_l_s" prot="public">mknix::ShapeFunctionMLS</innerclass>
    <innerclass refid="db/d4a/classmknix_1_1_shape_function_r_b_f" prot="public">mknix::ShapeFunctionRBF</innerclass>
    <innerclass refid="d8/dbd/classmknix_1_1_shape_function_tetrahedron" prot="public">mknix::ShapeFunctionTetrahedron</innerclass>
    <innerclass refid="d4/d8b/classmknix_1_1_shape_function_triangle" prot="public">mknix::ShapeFunctionTriangle</innerclass>
    <innerclass refid="d0/dbb/classmknix_1_1_shape_function_triangle_signed" prot="public">mknix::ShapeFunctionTriangleSigned</innerclass>
    <innerclass refid="db/d0b/classmknix_1_1_simulation" prot="public">mknix::Simulation</innerclass>
    <innerclass refid="df/dd9/classmknix_1_1_system" prot="public">mknix::System</innerclass>
    <innerclass refid="dd/d70/classmknix_1_1_system_chain" prot="public">mknix::SystemChain</innerclass>
    <innerclass refid="d2/d2b/classmknix_1_1_thermal_body" prot="public">mknix::ThermalBody</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d2/dde/namespacemknix_1a16be4b246fbf2cceb141e3a179111020" prot="public" static="no">
        <type>double</type>
        <definition>typedef double mknix::data_type</definition>
        <argsstring></argsstring>
        <name>data_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel/Projects/MkniX/src/common.h" line="28" column="1" bodyfile="/home/daniel/Projects/MkniX/src/common.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d2/dde/namespacemknix_1a3c53b5663b9039ec67691eea93bb7f54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mknix::interpolate1D</definition>
        <argsstring>(double key, const std::map&lt; double, double &gt; &amp;theMap)</argsstring>
        <name>interpolate1D</name>
        <param>
          <type>double</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::map&lt; double, double &gt; &amp;</type>
          <declname>theMap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel/Projects/MkniX/src/common.cpp" line="24" column="1" bodyfile="/home/daniel/Projects/MkniX/src/common.cpp" bodystart="24" bodyend="40"/>
        <referencedby refid="d2/d5c/classmknix_1_1_load_thermal_body_1a174097626bef1d662a7ee0c24cb62ac1" compoundref="d7/de5/loadthermalbody_8cpp" startline="52" endline="90">mknix::LoadThermalBody::getLoadThermalBody</referencedby>
        <referencedby refid="df/df4/classmknix_1_1_load_thermal_boundary1_d_1a28be37a4ae82bde77b7dd048d36503f5" compoundref="db/d8e/loadthermalboundary1_d_8cpp" startline="78" endline="90">mknix::LoadThermalBoundary1D::getLoadThermalBoundary1D</referencedby>
        <referencedby refid="d6/d4a/classmknix_1_1_material_1aacb94c35534ffe8a2d15d977ce630b44" compoundref="d3/d65/material_8h" startline="63" endline="66">mknix::Material::getCapacity</referencedby>
        <referencedby refid="d6/d4a/classmknix_1_1_material_1a93b8de406b8356e577803cc26179b051" compoundref="d3/d65/material_8h" startline="67" endline="70">mknix::Material::getKappa</referencedby>
        <referencedby refid="d1/dda/classmknix_1_1_motion_1a394f15ff3316a804176f0761abf66513" compoundref="d3/d9e/motion_8cpp" startline="42" endline="52">mknix::Motion::update</referencedby>
        <referencedby refid="dd/d70/classmknix_1_1_system_chain_1a9ccb93db731aa96bae11540b035afa18" compoundref="d2/d04/systemchain_8cpp" startline="116" endline="143">mknix::SystemChain::update</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/dde/namespacemknix_1a7635c8b68c992d53466bf5083e9c7ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt;T&gt; mknix::make_unique</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>make_unique</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stand-in for std::make_unique included in C++14 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel/Projects/MkniX/src/common.h" line="36" column="1" bodyfile="/home/daniel/Projects/MkniX/src/common.h" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="d2/dde/namespacemknix_1a9daa80e39c022af627d39f77dfd98fb0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d1/d20/classlmx_1_1_vector" kindref="compound">lmx::Vector</ref>&lt; double &gt;</type>
        <definition>static lmx::Vector&lt;double&gt; mknix::gravity</definition>
        <argsstring>(3)</argsstring>
        <name>gravity</name>
        <param>
          <type>3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel/Projects/MkniX/src/core/dictionary.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d2/dde/namespacemknix_1a8f5fd36c13ae99d02e930a9dad382721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mknix::setSignal</definition>
        <argsstring>(std::string node, std::vector&lt; double &gt;)</argsstring>
        <name>setSignal</name>
        <param>
          <type>std::string</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel/Projects/MkniX/src/simulation/simulation.cpp" line="202" column="1" bodyfile="/home/daniel/Projects/MkniX/src/simulation/simulation.cpp" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="d2/dde/namespacemknix_1a191080c246e25b3b1cfbccbabbe50fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; mknix::getSignal</definition>
        <argsstring>(std::string node)</argsstring>
        <name>getSignal</name>
        <param>
          <type>std::string</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/daniel/Projects/MkniX/src/simulation/simulation.cpp" line="208" column="1" bodyfile="/home/daniel/Projects/MkniX/src/simulation/simulation.cpp" bodystart="208" bodyend="211"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Daniel Iglesias &lt;daniel&gt; </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/daniel/Projects/MkniX/src/common.cpp" line="22" column="1"/>
  </compounddef>
</doxygen>
