<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.4">
  <compounddef id="d7/d5c/material_8cpp" kind="file">
    <compoundname>material.cpp</compoundname>
    <includes refid="d3/d65/material_8h" local="yes">material.h</includes>
    <incdepgraph>
      <node id="7130">
        <label>material.h</label>
        <link refid="d3/d65/material_8h"/>
        <childnode refid="7131" relation="include">
        </childnode>
      </node>
      <node id="7131">
        <label>LMX/lmx.h</label>
      </node>
      <node id="7129">
        <label>material.cpp</label>
        <link refid="material.cpp"/>
        <childnode refid="7130" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="d2/dde/namespacemknix">mknix</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2013<sp/>by<sp/>Daniel<sp/>Iglesias<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/><sp/>http://code.google.com/p/mknix<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/><sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/><sp/><sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/>59<sp/>Temple<sp/>Place<sp/>-<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/><sp/>02111-1307,<sp/>USA.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d65/material_8h" kindref="compound">material.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mknix<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="d6/d4a/classmknix_1_1_material_1a6bfec89c033e42c81479ffeb2cfca33b" refkind="member"><highlight class="normal"><ref refid="d6/d4a/classmknix_1_1_material_1a6bfec89c033e42c81479ffeb2cfca33b" kindref="member">Material::Material</ref>()</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Thermal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="d6/d4a/classmknix_1_1_material_1a1f5cfec4e49a4dbfba8ccd2d2b3ac6c9" refkind="member"><highlight class="normal"><ref refid="d6/d4a/classmknix_1_1_material_1a6bfec89c033e42c81479ffeb2cfca33b" kindref="member">Material::Material</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>capacity_in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kappa_in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>density_in)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>:<sp/>capacity(capacity_in),<sp/>kappa(kappa_in),<sp/>density(density_in)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mechanical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="d6/d4a/classmknix_1_1_material_1a10a6d06e979d85892c01fe59c908d06d" refkind="member"><highlight class="normal"><ref refid="d6/d4a/classmknix_1_1_material_1a6bfec89c033e42c81479ffeb2cfca33b" kindref="member">Material::Material</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>young_in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>poisson_in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>density_in)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>:<sp/>dim(dim_in),<sp/>young(young_in),<sp/>poisson(poisson_in),<sp/>density(density_in)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>lambda<sp/>=<sp/>(poisson*young)<sp/>/<sp/>(<sp/>(1+poisson)*(1-2*poisson)<sp/>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>mu<sp/>=<sp/>young<sp/>/<sp/>(<sp/>2*(1+poisson)<sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="d6/d4a/classmknix_1_1_material_1a134d81df672beb86b49b23dc0ac8cfe7" kindref="member">computeD</ref>();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="d6/d4a/classmknix_1_1_material_1a30503f7c95cd5f7410836224b9e66c19" kindref="member">computeC</ref>();</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="d6/d4a/classmknix_1_1_material_1ab0c23c9dfb7119afa0f20e912d4af6e6" refkind="member"><highlight class="normal"><ref refid="d6/d4a/classmknix_1_1_material_1ab0c23c9dfb7119afa0f20e912d4af6e6" kindref="member">Material::~Material</ref>()</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="d6/d4a/classmknix_1_1_material_1a134d81df672beb86b49b23dc0ac8cfe7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d4a/classmknix_1_1_material_1a134d81df672beb86b49b23dc0ac8cfe7" kindref="member">Material::computeD</ref>(<sp/>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>comFacD;<sp/></highlight><highlight class="comment">//<sp/>Common<sp/>factor<sp/>for<sp/>matrix<sp/>D.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim==2){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>D.resize(3,3);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Plain<sp/>stress<sp/>case:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>comFacD<sp/>=<sp/>young<sp/>/<sp/>(1<sp/>-<sp/>std::pow(poisson,<sp/>2)<sp/>);<sp/></highlight><highlight class="comment">//<sp/>=<sp/>E/(1-mu^2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>D(0,0)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>D(0,1)<sp/>=<sp/>poisson;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>D.writeElement(D.readElement(0,1),1,0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>D(1,1)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>D(2,2)<sp/>=<sp/>(1-poisson)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>*=<sp/>comFacD;<sp/></highlight><highlight class="comment">//Apply<sp/>common<sp/>factor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim==3){</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>D.resize(6,6);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>comFacD<sp/>=<sp/>young<sp/>/<sp/>(<sp/>(1+poisson)*(1-2*poisson)<sp/>);<sp/></highlight><highlight class="comment">//<sp/>=<sp/>E/((1+mu)(1-2*mu))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>D.writeElement(1.-poisson,0,0);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>D.writeElement(1.-poisson,1,1);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>D.writeElement(1.-poisson,2,2);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>D.writeElement(<sp/><sp/><sp/>poisson,0,1);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>D.writeElement(<sp/><sp/><sp/>poisson,0,2);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>D.writeElement(<sp/><sp/><sp/>poisson,1,2);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>D.writeElement(D.readElement(0,1),1,0);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>D.writeElement(D.readElement(0,2),2,0);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>D.writeElement(D.readElement(2,1),1,2);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>D.writeElement(<sp/>(1.-2*poisson)/2.,3,3);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>D.writeElement(<sp/>(1.-2*poisson)/2.,4,4);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>D.writeElement(<sp/>(1.-2*poisson)/2.,5,5);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="d6/d4a/classmknix_1_1_material_1a30503f7c95cd5f7410836224b9e66c19" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d4a/classmknix_1_1_material_1a30503f7c95cd5f7410836224b9e66c19" kindref="member">Material::computeC</ref>(<sp/>)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim==2){</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>C.resize(3,3);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Plain<sp/>stress<sp/>case:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>C(0,0)<sp/>=<sp/>lambda+2*mu;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>C(0,1)<sp/>=<sp/>lambda;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>C.writeElement(C.readElement(0,1),1,0);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>C(1,1)<sp/>=<sp/>lambda+2*mu;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>C(2,2)<sp/>=<sp/>mu;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dim==3){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>C.resize(6,6);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Plain<sp/>stress<sp/>case:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>C(0,0)<sp/>=<sp/>lambda+2*mu;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>C(0,1)<sp/>=<sp/>lambda;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>C(0,2)<sp/>=<sp/>lambda;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>C(1,2)<sp/>=<sp/>lambda;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>C.writeElement(C.readElement(0,1),1,0);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>C.writeElement(C.readElement(0,2),2,0);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>C.writeElement(C.readElement(1,2),2,1);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>C(1,1)<sp/>=<sp/>lambda+2*mu;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>C(2,2)<sp/>=<sp/>lambda+2*mu;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>C(3,3)<sp/>=<sp/>mu;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>C(4,4)<sp/>=<sp/>mu;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>C(5,5)<sp/>=<sp/>mu;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>lambda<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>mu<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>C<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>int<sp/>kk=1;<sp/>cout<sp/>&lt;&lt;<sp/>this-&gt;getCsym(kk,kk,kk,kk)<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="d6/d4a/classmknix_1_1_material_1a457fa23b27193eb7b05f28cce48815c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d6/d4a/classmknix_1_1_material_1a457fa23b27193eb7b05f28cce48815c9" kindref="member">Material::getCsym</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>k,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0.25*(<sp/>Cijkl(i,j,k,l)<sp/>+<sp/>Cijkl(i,j,l,k)<sp/>+<sp/>Cijkl(j,i,k,l)<sp/>+<sp/>Cijkl(j,i,l,k)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Material::Cijkl(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>k,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>l<sp/>)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>res=0.;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i==j<sp/>&amp;&amp;<sp/>k==l)<sp/>res<sp/>+=<sp/>lambda;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i==k<sp/>&amp;&amp;<sp/>j==l)<sp/>res<sp/>+=<sp/>2*mu;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="d6/d4a/classmknix_1_1_material_1a4659947ce09c0f9c02b61d8f7d37dec8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d4a/classmknix_1_1_material_1a4659947ce09c0f9c02b61d8f7d37dec8" kindref="member">Material::computeS</ref>(cofe::TensorRank2Sym&lt;2,double&gt;<sp/>&amp;<sp/>S,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cofe::TensorRank2&lt;2,double&gt;<sp/>&amp;<sp/>F)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>cofe::TensorRank2Sym&lt;2,double&gt;<sp/>one;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>one.beUnityTensor();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>E<sp/>=<sp/>1/2<sp/>(F&apos;F<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>E.beTraProductOf(F,F);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>E<sp/>-=<sp/>one;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>E<sp/>*=<sp/>0.5;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>St.<sp/>Venant<sp/>Kirchoff:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>S<sp/>=<sp/>lambda*tr(E)*1<sp/>+<sp/>2*mu*E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>S<sp/>=<sp/>E;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>S<sp/>*=<sp/>2*mu;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>one<sp/>*=<sp/>lambda*E.trace();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>S<sp/>+=<sp/>one;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="d6/d4a/classmknix_1_1_material_1a837495b42050514f0c22513a05d438d8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d6/d4a/classmknix_1_1_material_1a4659947ce09c0f9c02b61d8f7d37dec8" kindref="member">Material::computeS</ref>(cofe::TensorRank2Sym&lt;3,double&gt;<sp/>&amp;<sp/>S,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cofe::TensorRank2&lt;3,double&gt;<sp/>&amp;<sp/>F)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>cofe::TensorRank2Sym&lt;3,double&gt;<sp/>one;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>one.beUnityTensor();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>E<sp/>=<sp/>1/2<sp/>(F&apos;F<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>E3.beTraProductOf(F,F);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>E3<sp/>-=<sp/>one;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>E3<sp/>*=<sp/>0.5;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>St.<sp/>Venant<sp/>Kirchoff:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>S<sp/>=<sp/>lambda*tr(E)*1<sp/>+<sp/>2*mu*E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>S<sp/>=<sp/>E;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>S<sp/>*=<sp/>2*mu;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>one<sp/>*=<sp/>lambda*E.trace();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>S<sp/>+=<sp/>one;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="d6/d4a/classmknix_1_1_material_1a682b5ff79b4e899acb8d691aa01609c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d6/d4a/classmknix_1_1_material_1a682b5ff79b4e899acb8d691aa01609c6" kindref="member">Material::computeEnergy</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cofe::TensorRank2&lt;2,double&gt;<sp/>&amp;<sp/>F<sp/>)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>cofe::TensorRank2Sym&lt;2,double&gt;<sp/>one;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>one.beUnityTensor();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>E<sp/>=<sp/>1/2<sp/>(F&apos;F<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>E.beTraProductOf(F,F);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>E<sp/>-=<sp/>one;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>E<sp/>*=<sp/>0.5;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>W<sp/>=<sp/>1/2<sp/>lambda<sp/>*<sp/>tr(E)^2<sp/>+<sp/>mu<sp/>*<sp/>E:E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy<sp/>=<sp/>0.5<sp/>*<sp/>lambda<sp/>*<sp/>pow(<sp/>E.trace(),<sp/>2<sp/>)<sp/>+<sp/>mu<sp/>*<sp/>E.dot(<sp/>E<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>energy;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="d6/d4a/classmknix_1_1_material_1a9183dec8b227f1a4ff6c45948a1523f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d6/d4a/classmknix_1_1_material_1a682b5ff79b4e899acb8d691aa01609c6" kindref="member">Material::computeEnergy</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cofe::TensorRank2&lt;3,double&gt;<sp/>&amp;<sp/>F<sp/>)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>cofe::TensorRank2Sym&lt;3,double&gt;<sp/>one;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>one.beUnityTensor();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>E<sp/>=<sp/>1/2<sp/>(F&apos;F<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>E3.beTraProductOf(F,F);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>E3<sp/>-=<sp/>one;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>E3<sp/>*=<sp/>0.5;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>W<sp/>=<sp/>1/2<sp/>lambda<sp/>*<sp/>tr(E)^2<sp/>+<sp/>mu<sp/>*<sp/>E:E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>energy<sp/>=<sp/>0.5<sp/>*<sp/>lambda<sp/>*<sp/>pow(<sp/>E.trace(),<sp/>2<sp/>)<sp/>+<sp/>mu<sp/>*<sp/>E.dot(<sp/>E<sp/>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>energy;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dani/Dropbox/MkniX_cmake/src/material.cpp"/>
  </compounddef>
</doxygen>
